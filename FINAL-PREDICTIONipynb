{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1Ni6jX-YpZnCsfXzjju6OH7qU4g8vk9ii","authorship_tag":"ABX9TyNQbnfQ3JamNwu5mtyUxcuc"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**Data Preparation**"],"metadata":{"id":"7U68j3fZRnf9"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","ratings= pd.read_csv(\"/content/drive/MyDrive/ML IE506/ml-100k/ml-100k/u.data\")\n","df= pd.DataFrame(ratings)\n","print(df)\n","#df['movieId'].max()\n","#df['movieId'].min()\n","temp = 1\n","#userItem  = np.zeros((610+1,df['movieId'].max()+1))\n","#print(userItem )\n"],"metadata":{"id":"n2fHoxGWD6ys","executionInfo":{"status":"ok","timestamp":1715193099172,"user_tz":-330,"elapsed":6,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f5ae3820-e819-4f21-c971-279543ae4053"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["        196\\t242\\t3\\t881250949\n","0       186\\t302\\t3\\t891717742\n","1        22\\t377\\t1\\t878887116\n","2        244\\t51\\t2\\t880606923\n","3       166\\t346\\t1\\t886397596\n","4       298\\t474\\t4\\t884182806\n","...                        ...\n","99994   880\\t476\\t3\\t880175444\n","99995   716\\t204\\t5\\t879795543\n","99996  276\\t1090\\t1\\t874795795\n","99997    13\\t225\\t2\\t882399156\n","99998    12\\t203\\t3\\t879959583\n","\n","[99999 rows x 1 columns]\n"]}]},{"cell_type":"markdown","source":["# **Bringing DATA in proper format **"],"metadata":{"id":"ULkDlklxO4sF"}},{"cell_type":"code","source":["column_names = ['UserID', 'MovieID', 'Rating', 'Timestamp']\n","data = pd.read_csv('/content/drive/MyDrive/ML IE506/ml-100k/ml-100k/u.data', sep='\\t', names=column_names)\n","\n","# Display the first few rows to verify it's read correctly\n","data.head()"],"metadata":{"id":"L7ZoHmzuOwvP","executionInfo":{"status":"ok","timestamp":1715193101959,"user_tz":-330,"elapsed":726,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}},"colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"8fe01295-79c2-4d9c-add1-0ebb13d2b1d6"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   UserID  MovieID  Rating  Timestamp\n","0     196      242       3  881250949\n","1     186      302       3  891717742\n","2      22      377       1  878887116\n","3     244       51       2  880606923\n","4     166      346       1  886397596"],"text/html":["\n","  <div id=\"df-f51e9967-b55f-4363-962b-fc25f4425661\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>UserID</th>\n","      <th>MovieID</th>\n","      <th>Rating</th>\n","      <th>Timestamp</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>196</td>\n","      <td>242</td>\n","      <td>3</td>\n","      <td>881250949</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>186</td>\n","      <td>302</td>\n","      <td>3</td>\n","      <td>891717742</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>22</td>\n","      <td>377</td>\n","      <td>1</td>\n","      <td>878887116</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>244</td>\n","      <td>51</td>\n","      <td>2</td>\n","      <td>880606923</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>166</td>\n","      <td>346</td>\n","      <td>1</td>\n","      <td>886397596</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f51e9967-b55f-4363-962b-fc25f4425661')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f51e9967-b55f-4363-962b-fc25f4425661 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f51e9967-b55f-4363-962b-fc25f4425661');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6bc57b8e-63aa-4617-ac3a-28ada79d2428\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6bc57b8e-63aa-4617-ac3a-28ada79d2428')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6bc57b8e-63aa-4617-ac3a-28ada79d2428 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 100000,\n  \"fields\": [\n    {\n      \"column\": \"UserID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 266,\n        \"min\": 1,\n        \"max\": 943,\n        \"num_unique_values\": 943,\n        \"samples\": [\n          262,\n          136,\n          821\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MovieID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 330,\n        \"min\": 1,\n        \"max\": 1682,\n        \"num_unique_values\": 1682,\n        \"samples\": [\n          1557,\n          808,\n          1618\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          5,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Timestamp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5343856,\n        \"min\": 874724710,\n        \"max\": 893286638,\n        \"num_unique_values\": 49282,\n        \"samples\": [\n          889728713,\n          888443306,\n          880605158\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["# Dropping the 'Timestamp' column\n","data = data.drop(columns=['Timestamp'])\n","print(data.head())"],"metadata":{"id":"X73qctaLQfFA","executionInfo":{"status":"ok","timestamp":1715193105013,"user_tz":-330,"elapsed":6,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c66c7df0-8e78-468a-dc69-90a8b569c3ba"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["   UserID  MovieID  Rating\n","0     196      242       3\n","1     186      302       3\n","2      22      377       1\n","3     244       51       2\n","4     166      346       1\n"]}]},{"cell_type":"code","source":["a=np.sum(data['Rating'])\n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TY4K0uQvdBAO","executionInfo":{"status":"ok","timestamp":1715192816967,"user_tz":-330,"elapsed":14,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}},"outputId":"b54661db-0a69-42d2-f97d-140b9b9c9086"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["352986\n"]}]},{"cell_type":"code","source":["print(data.shape)\n","print(data['MovieID'].max())\n","print(data['MovieID'].min())"],"metadata":{"id":"bOl4AOQiQ2mW","executionInfo":{"status":"ok","timestamp":1715192816968,"user_tz":-330,"elapsed":14,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"07ff0773-712c-4f0e-d2c8-0c00372a8db4"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["(100000, 3)\n","1682\n","1\n"]}]},{"cell_type":"code","source":["print(data['UserID'].max())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SmUfrG6OYd1Y","executionInfo":{"status":"ok","timestamp":1715192816968,"user_tz":-330,"elapsed":13,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}},"outputId":"4751bb27-98f6-4c08-91ea-3f111870705a"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["943\n"]}]},{"cell_type":"code","source":["userItem  = np.zeros((data['UserID'].max()+1,data['MovieID'].max()+1))\n","print(userItem )"],"metadata":{"id":"nGQmqFHxSWu0","executionInfo":{"status":"ok","timestamp":1715192816968,"user_tz":-330,"elapsed":13,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"47b9dbb6-cb31-43d4-b636-93d123af80a1"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0. 0. 0. ... 0. 0. 0.]\n"," [0. 0. 0. ... 0. 0. 0.]\n"," [0. 0. 0. ... 0. 0. 0.]\n"," ...\n"," [0. 0. 0. ... 0. 0. 0.]\n"," [0. 0. 0. ... 0. 0. 0.]\n"," [0. 0. 0. ... 0. 0. 0.]]\n"]}]},{"cell_type":"code","source":["# Assume data has been loaded and preprocessed as described\n","import numpy as np\n","\n","# Initialize the userItem matrix with zeros\n","userItem = np.zeros((data['UserID'].max()+1, data['MovieID'].max()+1))\n","\n","# Populate the userItem matrix with all ratings from the dataset\n","for index, row in data.iterrows():\n","    userItem[int(row['UserID']), int(row['MovieID'])] = row['Rating']\n","\n","# Now calculate the sum of the userItem matrix\n","sum_ratings_userItem = np.sum(userItem)\n","print(sum_ratings_userItem)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ul3-s7Ho5R9q","executionInfo":{"status":"ok","timestamp":1715192820968,"user_tz":-330,"elapsed":4012,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}},"outputId":"29cb946a-6bf0-4be8-b991-17c9148e9b14"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["352986.0\n"]}]},{"cell_type":"markdown","source":["**Since 1st row and 1st column doesnot contain any data we will drop them.**"],"metadata":{"id":"2gTBGDjZ6oJ8"}},{"cell_type":"code","source":["sum1 = np.sum(userItem[:,0])\n","print(sum1)\n","sum2 = np.sum(userItem[0,:])\n","print(sum1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U-LdC3XK53CQ","executionInfo":{"status":"ok","timestamp":1715192820969,"user_tz":-330,"elapsed":8,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}},"outputId":"08037906-d298-4ee5-9f68-92d7ff8514fe"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["0.0\n","0.0\n"]}]},{"cell_type":"code","source":["R= (np.delete(userItem,0,1))\n","R =(np.delete(R,0,0))\n","print(R)\n","print(userItem.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zjuF2Pqbunss","executionInfo":{"status":"ok","timestamp":1715192820969,"user_tz":-330,"elapsed":7,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}},"outputId":"7ba7ca89-55bc-4595-866f-f7e7f8c0e989"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["[[5. 3. 4. ... 0. 0. 0.]\n"," [4. 0. 0. ... 0. 0. 0.]\n"," [0. 0. 0. ... 0. 0. 0.]\n"," ...\n"," [5. 0. 0. ... 0. 0. 0.]\n"," [0. 0. 0. ... 0. 0. 0.]\n"," [0. 5. 0. ... 0. 0. 0.]]\n","(944, 1683)\n"]}]},{"cell_type":"code","source":["min_rating = data['Rating'].min()\n","\n","# Find the maximum value in the \"Rating\" column\n","max_rating = data['Rating'].max()\n","\n","print(f\"Minimum Rating: {min_rating}\")\n","print(f\"Maximum Rating: {max_rating}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xm0q3SWcz5qb","executionInfo":{"status":"ok","timestamp":1715192820969,"user_tz":-330,"elapsed":5,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}},"outputId":"66fc2ef6-2cfd-4707-c7b4-8a324459c374"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Minimum Rating: 1\n","Maximum Rating: 5\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"NrTk-CCn0ftu","executionInfo":{"status":"ok","timestamp":1715192821975,"user_tz":-330,"elapsed":1010,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}}},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":["# Calculating Item Average"],"metadata":{"id":"WXYk0FwJ-YFZ"}},{"cell_type":"code","execution_count":14,"metadata":{"id":"McEQjFQYh3Qp","executionInfo":{"status":"ok","timestamp":1715192821975,"user_tz":-330,"elapsed":8,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}}},"outputs":[],"source":["def evaluate_item_averages(R, beta_i, epsilon1, epsilon2, r_min, r_max):\n","    # Calculate global average\n","    global_avg = (np.sum(R) + np.random.laplace(5-1/epsilon1)) / 1e5\n","\n","    # Initialize item averages\n","    item_averages = np.zeros(R.shape[1])\n","\n","    for j in range(R.shape[1]):\n","        # Select ratings for item j\n","        Rj = R[:, j]\n","\n","        # Calculate item average\n","        item_avg = (np.sum(Rj) + beta_i * global_avg + np.random.laplace((r_max - r_min)/epsilon2)) / (Rj.size + beta_i)\n","\n","        # Clamp item average to specified range\n","        item_avg = np.clip(item_avg, r_min, r_max)\n","\n","        item_averages[j] = item_avg\n","\n","    return item_averages\n","\n"]},{"cell_type":"code","source":["# Assuming userItem is defined elsewhere and is a NumPy array of shape [num_users, num_items]\n","# Your function definition here...\n","\n","# Call the function with the userItem matrix\n","beta_i = 2  # Example value, adjust as necessary\n","epsilon1 = 1  # Example value, adjust as necessary\n","epsilon2 = 1  # Example value, adjust as necessary\n","r_min = 1  # Assume\n","r_max = 5  # Assuming 5 is the maximum rating\n","\n","# Ensure userItem is correctly passed as the R parameter\n","item_averages = evaluate_item_averages(userItem, beta_i, epsilon1, epsilon2, r_min, r_max)\n","\n","print(\"Item averages:\", item_averages)\n","print(\"Number of items:\", len(item_averages))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m7-5Zvg_9Gyc","executionInfo":{"status":"ok","timestamp":1715193113957,"user_tz":-330,"elapsed":6,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}},"outputId":"948491cc-f93a-426d-c37b-3a935511c600"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Item averages: [1.         1.86798189 1.         ... 1.         1.         1.        ]\n","Number of items: 1683\n"]}]},{"cell_type":"markdown","source":["# Calculating User Average"],"metadata":{"id":"8xPmUvUn-eag"}},{"cell_type":"markdown","source":["This code calculates the user averages based on the given ratings matrix R, item averages, stabilization parameter beta_u, and privacy parameters epsilon1 and epsilon2. It also clamps the user averages within the specified range [-2, 2].\n"],"metadata":{"id":"T2U-A8OboDX_"}},{"cell_type":"code","source":["def evaluate_user_effects(Re, item_averages, beta_u, epsilon1, epsilon2):\n","    # Compute R0\n","    R0 = Re - item_averages\n","    print(R0.shape)\n","    # Calculate global average of R0\n","    global_avg_0 = (np.sum(R0) + np.random.laplace(4/epsilon1)) / 1e5\n","    print(global_avg_0)\n","    # Initialize user averages\n","    user_averages = np.zeros(Re.shape[0])\n","    print(user_averages.shape)\n","\n","    for v in range(Re.shape[0]):\n","        # Select ratings for user v\n","        Rv = R0[v, :]\n","\n","        # Calculate user average\n","        user_avg = (np.sum(Rv) + beta_u * global_avg_0 + np.random.laplace(scale=1/epsilon2)) / (Rv.size + beta_u)\n","\n","        # Clamp user average to specified range\n","        user_avg = np.clip(user_avg, -2, 2)\n","\n","        user_averages[v] = user_avg\n","\n","    return user_averages\n","\n","\n","\n"],"metadata":{"id":"eZCMTUlHh4T4","executionInfo":{"status":"ok","timestamp":1715192821975,"user_tz":-330,"elapsed":7,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["item_averages #Already initialised\n","beta_u = 2  # Stabilization parameter for user averages\n","epsilon1 = 1  # Global average privacy parameter\n","epsilon2 = 1  # User average privacy parameter\n","\n","user_averages = evaluate_user_effects(userItem, item_averages, beta_u, epsilon1, epsilon2)\n","print(\"User averages:\", user_averages)\n","print(\"Number of items:\", len(user_averages))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jDweJi0r_tCd","executionInfo":{"status":"ok","timestamp":1715192821975,"user_tz":-330,"elapsed":6,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}},"outputId":"98d1eb8d-b1cd-450f-ee84-c6fd3940201e"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["(944, 1683)\n","-12.597237424696186\n","(944,)\n","User averages: [-1.02829596 -0.44593176 -0.89386834 -0.94019824 -0.96691995 -0.73129262\n"," -0.57369372 -0.08072233 -0.89592271 -0.97243529 -0.56934044 -0.65775225\n"," -0.89636417  0.14174861 -0.79099417 -0.85174199 -0.66899096 -0.97843495\n"," -0.39160725 -0.98662115 -0.94011872 -0.74530514 -0.774839   -0.70357237\n"," -0.85367469 -0.84142223 -0.84145572 -0.98039005 -0.85419685 -0.95497279\n"," -0.93314133 -0.94631154 -0.94693519 -0.97496567 -0.98164735 -0.98411705\n"," -0.98349363 -0.9034745  -0.76248937 -0.97966377 -0.9688349  -0.91261277\n"," -0.62384286 -0.54058132 -0.70174008 -0.92447405 -0.96537297 -0.97521046\n"," -0.8817745  -0.68628254 -0.97813527 -0.97865323 -0.88662495 -0.96641178\n"," -0.88631361 -0.98668181 -0.62416769 -0.80874005 -0.67783129 -0.13662165\n"," -0.52401573 -0.99128796 -0.57461363 -0.85674506 -0.60296627 -0.84092496\n"," -0.95013719 -0.96287735 -0.96886641 -0.88031559 -0.76004875 -0.94411195\n"," -0.71910103 -0.88296081 -0.94456785 -0.87540959 -0.85551907 -0.87477966\n"," -0.98446178 -0.89834263 -0.96425924 -0.91512047 -0.72269556 -0.71316645\n"," -0.87548711 -0.42432895 -0.98036656 -0.55464122 -0.97972682 -0.8475539\n"," -0.27719972 -0.80248494 -0.28227628 -0.98928657 -0.15985192 -0.46491791\n"," -0.88614026 -0.87331532 -0.97243254 -0.74397415 -0.92072585 -0.91372121\n"," -0.69320985 -0.96720008 -0.8541804  -0.9824534  -0.88457138 -0.98978074\n"," -0.95849055 -0.551396   -0.78821453 -0.97804322 -0.92720397 -0.91655813\n"," -0.92565699 -0.81330378 -0.77394644 -0.83024603 -0.833205   -0.60433279\n"," -0.97388252 -0.87043728 -0.88277457 -0.90491055 -0.98027515 -0.65674303\n"," -0.93438212 -0.9717296  -0.62895173 -0.98271378 -0.19352337 -0.95501265\n"," -0.97935462 -0.98080401 -0.97439152 -0.91833316 -0.93864813 -0.90880067\n"," -0.89938895 -0.97123398 -0.98529929 -0.81046968 -0.95636918 -0.98346025\n"," -0.57944743 -0.40358095 -0.96609982 -0.97959843 -0.87180369 -0.96715955\n"," -0.95572913 -0.2999947  -0.75690069 -0.98949408 -0.90924404 -0.9940591\n"," -0.94693517 -0.91403921 -0.63878391 -0.81127211 -0.74895566 -0.94039907\n"," -0.93892025 -0.98495418 -0.87475186 -0.9583565  -0.98614648 -0.89094193\n"," -0.89394753 -0.94056268 -0.98006281 -0.97109352 -0.9776705  -0.921992\n"," -0.65224591 -0.9439519  -0.89001534 -0.7818792  -0.43258717 -0.95288824\n"," -0.88094644 -0.64418549 -0.96469242 -0.92830847 -0.48315233 -0.91330126\n"," -0.84377125 -0.89403901 -0.77846009 -0.58892745 -0.9128415  -0.97032175\n"," -0.9558168  -0.80129212 -0.49221483 -0.84122459 -0.94590116 -0.79466877\n"," -0.67762369 -0.95803238 -0.5112122  -0.33465187 -0.99783522 -0.93884164\n"," -0.94345863 -0.99144042 -0.94604833 -0.58791811 -0.95411353 -0.96620177\n"," -0.71105908 -0.95819102 -0.97184842 -0.71169438 -0.73291563 -0.82093737\n"," -0.73238332 -0.89526156 -0.91737266 -0.96633551 -0.98015563 -0.71576549\n"," -0.32869437 -0.84208584 -0.77855921 -0.95679651 -0.91625238 -0.91074975\n"," -0.99016994 -0.97968178 -0.72394958 -0.98335926 -0.8137125  -0.74358532\n"," -0.13838511 -0.80688726 -0.77304715 -0.91077669 -0.97234882 -0.63113359\n"," -0.97630387 -0.98281873 -0.97721863 -0.85425421 -0.51326814 -0.98896835\n"," -0.69041104 -0.96921545 -0.90926256 -0.63599541 -0.75331072 -0.85512243\n"," -0.97414267 -0.800399   -0.74082079 -0.90423697 -0.53867309 -0.89196299\n"," -0.97748443 -0.92262092 -0.9716659  -0.96331683 -0.7273597  -0.73449015\n"," -0.7298939  -0.93089307 -0.98469894 -0.59554758 -0.45604489 -0.45259719\n"," -0.67392244 -0.43795024 -0.89851797 -0.98200312 -0.85759684 -0.85323918\n","  0.03660477 -0.91657374 -0.97181445 -0.18748567 -0.47940404 -0.97958161\n"," -0.98400803 -0.89872382 -0.92946831 -0.95412103 -0.3929705  -0.87677925\n"," -0.85537142 -0.98200514 -0.73071104 -0.38162138 -0.71812464 -0.32931397\n"," -0.72017265 -0.5344399  -0.66417583 -0.6373297  -0.72464508 -0.45254086\n"," -0.98417017 -0.45319343 -0.99939729 -0.06095202 -0.97701736 -0.57855006\n"," -0.95738298 -0.77649767 -0.14412077 -0.98732887 -0.98087709 -0.366528\n"," -0.44870901 -0.46932484 -0.49392795 -0.82140433 -0.87933413 -0.98241021\n"," -0.64576593 -0.98056355 -0.68955964 -0.75122689 -0.90204434 -0.8375945\n"," -0.85841591 -0.7422857  -0.65843528 -0.47023968 -0.45131989 -0.89743846\n"," -0.63490417 -0.87800826 -0.57722292 -0.96959687 -0.33364665 -0.98237992\n"," -0.80009284 -0.94961883 -0.85092308 -0.42625139 -0.91716964 -0.98209078\n"," -0.61892122 -0.46757694 -0.61392495 -0.52619473 -0.65250681 -0.60496326\n"," -0.89505333 -0.95187512 -0.90171166 -0.92042552 -0.93419803 -0.97919459\n"," -0.51136082 -0.96487282 -0.97725201 -0.84282048 -0.9344775  -0.96498544\n"," -0.78884192 -0.75790183 -0.97570278 -0.46588363 -0.98754024 -0.91175799\n"," -0.94283576 -0.88564992 -0.94103099 -0.97644619 -0.86413431 -0.90540442\n"," -0.86033563 -0.51321642 -0.49039352 -0.96764382 -0.96194568 -0.95275322\n"," -0.26680963 -0.56484762 -0.72149604 -0.74162756 -0.91890682 -0.84433873\n"," -0.97470124 -0.4792534  -0.97787494 -0.42239615 -0.89981272 -0.43272852\n"," -0.95797835 -0.75751854 -0.75978153 -0.14163198 -0.68908645 -0.8963708\n"," -0.91863323 -0.80178352 -0.64931757 -0.47196781 -0.98141724 -0.74441212\n"," -0.87170244 -0.91906468 -0.94403182 -0.2259128  -0.31237973 -0.56369704\n"," -0.96816387 -0.59659128 -0.97716533 -0.90158866 -0.90929926 -0.91999994\n"," -0.97053112 -0.96923275  0.09608651 -0.32546774 -0.99446737 -0.9484036\n"," -0.9390502  -0.88665344 -0.82935672 -0.89297312 -0.94090573 -0.67232373\n"," -0.8001755  -0.94502841 -0.90042662 -0.19365553 -0.89067426 -0.98794748\n"," -0.89228644 -0.94410896 -0.93381595 -0.28379986 -0.7071516  -0.46970042\n"," -0.95091426 -0.96044271 -0.90334875 -0.9862502  -0.76280688 -0.98069507\n"," -0.97500082 -0.8698053  -0.97028056 -0.72894992 -0.95366949 -0.86321351\n","  0.20852131 -0.87082832 -0.61079064 -0.72139263 -0.61140406 -0.63545795\n"," -0.58467227 -0.36712777 -0.62860769 -0.78935362 -0.89054689 -0.98759523\n"," -0.95084372 -0.80278776 -0.90150846 -0.86582252 -0.82203535 -0.93250088\n"," -0.69019659 -0.91463899 -0.90850095 -0.96657939 -0.3687617  -0.94761592\n"," -0.23665301 -0.98600352 -0.86302213 -0.93663402 -0.79983041 -0.61916429\n"," -0.89461175 -0.89618983 -0.97620857 -0.92190936 -0.69934668 -0.9818821\n"," -0.66727322 -0.52699091 -0.72218792 -0.78786107 -0.93450464 -0.95375443\n"," -0.91400301 -0.72745265 -0.92056448 -0.52945614 -0.79594343 -0.50237267\n"," -0.73818742 -0.7949342  -0.58247981 -0.86642308 -0.96077585 -0.64723412\n"," -0.48854548 -0.80524926 -0.50133931 -0.86897825 -0.83053518 -0.98014609\n"," -0.98035189 -0.97554895 -0.9744363  -0.97198013 -0.58762292 -0.95869316\n"," -0.97841677 -0.95569848 -0.87078464 -0.9093633  -0.98127915 -0.75149289\n"," -0.95050785 -0.76908276 -0.39347368 -0.9235271  -0.89850327 -0.71600691\n"," -0.91197715 -0.93861742 -0.92567517 -0.97133947 -0.35880802 -0.50628902\n"," -0.83540277 -0.5195959  -0.65576863 -0.19578903 -0.8547922  -0.89608757\n"," -0.89013271 -0.74254929 -0.74912384 -0.61563703 -0.98003483 -0.69192615\n"," -0.89316524 -0.97744029 -0.69169468 -0.97403012 -0.94232499 -0.27384689\n"," -0.87346072 -0.78223215 -0.78733913 -0.90594201 -0.92065363 -0.90985753\n"," -0.97893766 -0.86674206 -0.82388102 -0.38780643 -0.87693497 -0.96225275\n"," -0.96008639 -0.93286936 -0.72398343 -0.66513404 -0.86719636 -0.88474339\n"," -0.9943031  -0.98653054 -0.98935764 -0.91482169 -0.93282168 -0.97930604\n"," -0.95347048 -0.60428542 -0.99025684 -0.87525139 -0.92906702 -0.96149102\n"," -0.90837034 -0.95775861 -0.9785335  -0.85224813 -0.70142752 -0.85602874\n"," -0.52923604 -0.94072804 -0.9287709  -0.84542464 -0.21385676 -0.69510523\n"," -0.97722956 -0.84599103 -0.98772804 -0.94039836 -0.97612186 -0.9203295\n"," -0.83981732 -0.75836967 -0.96322606 -0.92365649 -0.97612919 -0.82833234\n"," -0.47264904 -0.94419943 -0.6739884  -0.9896844  -0.86272797 -0.93269613\n"," -0.97534647 -0.95705214 -0.95630348 -0.79152404 -0.93607941 -0.86023586\n"," -0.60872494 -0.84373485 -0.78026928 -0.66867207 -0.57017741 -0.928989\n"," -0.73256489 -0.81277511 -0.98302722 -0.67529804 -0.95342407 -0.73580454\n"," -0.81478562 -0.99262568 -0.77311442 -0.91487996 -0.75857441 -0.96198737\n"," -0.97601529 -0.87511015 -0.88816866 -0.76874585 -0.7548782  -0.93064678\n"," -0.34568329 -0.57155166 -0.9290921  -0.74118138 -0.96218013 -0.89751884\n"," -0.45417882 -0.97415938 -0.44922401 -0.98787355 -0.9878549  -0.57680902\n"," -0.70750021  0.15395604 -0.99308014 -0.97145426 -0.87169403 -0.59696699\n"," -0.68510556 -0.74847743 -0.97469921 -0.69636149 -0.65990128 -0.7357084\n"," -0.49598652 -0.91762292 -0.9327791  -0.82886299 -0.92361551 -0.76495733\n"," -0.97340245 -0.9479484  -0.94007953 -0.9537587  -0.8655452  -0.92486861\n"," -0.97171856 -0.89394593 -0.93924594 -0.98654656 -0.28585466 -0.88699219\n"," -0.85066381 -1.00454325 -0.83551805 -0.98653562 -0.95871796 -0.94675101\n"," -0.81425459 -0.94822576 -0.95132916 -0.7435265  -0.64227692 -0.95521182\n"," -0.96039905 -0.79472468 -0.81406993 -0.75116107 -0.98343024 -0.9453946\n"," -0.98353091 -0.93061083 -0.82614807 -0.77811943 -0.97208561 -0.5398067\n"," -0.82885151 -0.7362926  -0.8399614  -0.52290005 -0.66818623 -0.97603693\n"," -0.93687189 -0.69209677 -0.40645793 -0.82388012 -0.94327188 -0.90478108\n"," -0.95846347 -0.67634539 -0.93879272 -0.98484821 -0.92087588 -0.9713296\n"," -0.98557449 -0.44874367 -0.97399578 -0.99285018 -0.95903652 -0.86235161\n"," -0.98484972 -0.83713841 -0.89260369 -0.92428556 -0.98593173 -0.95065798\n"," -0.7065406  -0.95468445 -0.98823798 -0.81598622 -0.9731596  -0.9525857\n"," -0.96837127 -0.91857246 -0.88277278 -0.32459404 -0.79054464 -0.37288589\n"," -0.96779196 -0.67552199 -0.88995361 -0.90683096 -0.96089491 -0.95902841\n"," -0.82149725 -0.69744039 -0.20631245 -0.95084663 -0.95009296 -0.91716761\n"," -0.99087303 -0.73904839 -0.79308056 -0.97395845 -0.68104834 -0.93110305\n"," -0.90477359 -0.97654573 -0.86556292 -0.87472427 -0.95151407 -0.71522651\n"," -0.75451424 -0.96636339 -0.81341951 -0.94325464 -0.91533585 -0.94359138\n"," -0.90191719 -0.9345739  -0.64428739 -0.95978547 -0.93955753 -0.96999881\n"," -0.75994807 -0.92223341 -0.535011   -0.95872923 -0.61560253 -0.97270402\n"," -0.94167827 -0.91372291 -0.9278863  -0.73341058 -0.2643054  -0.98733948\n"," -0.55770501 -0.97211064 -0.96569455 -0.9660222  -0.87330084 -0.96660983\n"," -0.30469376 -0.4863436  -0.72447754 -0.55731065 -0.97230504 -0.98696049\n"," -0.96173013 -0.97769772 -0.98755674 -0.98047528 -0.96808861 -0.62304091\n"," -0.97189315 -0.95708089 -0.98552437 -0.96191977 -0.9917158  -0.86907838\n"," -0.98234937 -0.58884278 -0.99673609 -0.7183228  -0.76676854 -0.97538627\n"," -0.8346359  -0.89435077 -0.7946441  -0.87567356 -0.98532892 -0.54416066\n"," -0.90309855 -0.77781898 -0.91402704 -0.94833985 -0.80155619 -0.9213165\n"," -0.54495261 -0.95851473 -0.96792348 -0.69778446 -0.85963688 -0.97044757\n"," -0.12825915 -0.76656439 -0.64729811 -0.9623684  -0.89067533 -0.59882536\n"," -0.92770755 -0.95384414 -0.6157366  -0.98292844 -0.97502474 -0.98586017\n"," -0.98715489 -0.94195449 -0.89149319 -0.92661567 -0.60154197 -0.8299614\n"," -0.36198508 -0.93799578 -0.9969865  -0.78836873 -0.66542022 -0.94887106\n"," -0.47774693 -0.79055837 -0.88265373 -0.99523448 -0.95207764 -0.80750816\n"," -0.97770248 -0.84490698 -0.76949984 -0.96516402 -0.28016758 -0.51578205\n"," -0.69927159 -0.4043639  -0.93348466 -0.82837351 -0.54996582 -0.62932465\n"," -0.97684286 -0.3652825  -0.75701866 -0.91353946 -0.49221857 -0.90935948\n"," -0.49885976 -0.98338945 -0.3881754  -0.59493046 -0.96556817 -0.74667953\n"," -0.96070295 -0.74448136 -0.92766638 -0.71785821 -0.92478903 -0.95136302\n"," -0.93561526 -0.62966207 -0.87450421 -0.96165496 -0.91594328 -0.80754889\n"," -0.90869042 -0.753819   -0.98705738 -0.98062767 -0.397124   -0.95446536\n"," -0.82372274 -0.58119098 -0.97894131 -0.81322742 -0.77472918 -0.84595134\n"," -0.84575801 -0.96966144 -0.98945322 -0.76535801 -0.94007902 -0.92323386\n"," -0.91861114 -0.89266774 -0.46172423 -0.73997628 -0.64672372 -0.93571522\n"," -0.7132295  -0.94753096 -0.81903666 -0.90374827 -0.80954293 -0.97668661\n"," -0.8282241  -0.68868848]\n","Number of items: 944\n"]}]},{"cell_type":"markdown","source":["**Matrix Factorization Algorithm**"],"metadata":{"id":"ViCxbGfjM36R"}},{"cell_type":"code","source":["R=userItem"],"metadata":{"id":"MU7EZZmDNLYa","executionInfo":{"status":"ok","timestamp":1715192821975,"user_tz":-330,"elapsed":5,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":["# **Differentailly Private SGD**"],"metadata":{"id":"wbKGwVUE3a4a"}},{"cell_type":"code","source":["import numpy as np\n","\n","def differentially_private_sgd(R, d, gamma, lambd, k, emax, epsilon):\n","    num_users, num_items = R.shape\n","    P = np.random.rand(num_users, d)\n","    Q = np.random.rand(num_items, d)\n","\n","    delta_r = np.max(R) - np.min(R)\n","\n","    # Assuming R is a numpy array, find non-zero (i.e., rated) entries\n","    rated_indices = np.argwhere(R > 0)\n","\n","    for epoch in range(k):\n","        np.random.shuffle(rated_indices)  # Shuffle the observed ratings\n","        for i, j in rated_indices:\n","            e_ui = R[i, j] - np.dot(P[i], Q[j]) + np.random.laplace(scale=k * delta_r / epsilon)\n","            e_ui = np.clip(e_ui, -emax, emax)\n","\n","            # Update rule remains the same, but only applied to observed ratings\n","            P[i] += gamma * (e_ui * Q[j] - lambd * P[i])\n","            Q[j] += gamma * (e_ui * P[i] - lambd * Q[j])\n","\n","    return P, Q\n"],"metadata":{"id":"Wzb0Smm-RGkA","executionInfo":{"status":"ok","timestamp":1715192821975,"user_tz":-330,"elapsed":5,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["d = 3\n","gamma = 0.01\n","lambd = 0.10\n","k = 5\n","emax = 0.1\n","epsilon = 1.0\n","\n"],"metadata":{"id":"GVvGqx6rSE3M","executionInfo":{"status":"ok","timestamp":1715192821976,"user_tz":-330,"elapsed":6,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["P, Q = differentially_private_sgd(R, d, gamma, lambd, k, emax, epsilon)"],"metadata":{"id":"ZIaA_MVPaDXW","executionInfo":{"status":"ok","timestamp":1715192840554,"user_tz":-330,"elapsed":18584,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["print('The size of P is',P.shape)\n","print('The size of P is',Q.shape)"],"metadata":{"id":"X5qdbHBeLYww","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715192840554,"user_tz":-330,"elapsed":17,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}},"outputId":"ccaf3236-f5f8-42e1-ac17-6bbd8af8b975"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["The size of P is (944, 3)\n","The size of P is (1683, 3)\n"]}]},{"cell_type":"markdown","source":["# **Recommendation Model**"],"metadata":{"id":"6GSjUYiKNQIT"}},{"cell_type":"markdown","source":["user_id: The ID of the user for whom you want to generate recommendations.\n","R: The original ratings matrix.\n","P and Q: The user and item factor matrices obtained from the SGD process.\n","item_averages and user_effects: Arrays containing the differentially private item averages and user-specific effects, respectively.\n","top_n: The number of top recommendations to return."],"metadata":{"id":"1KUgNowDNQCZ"}},{"cell_type":"code","source":["num_items = R.shape[1]\n","print(num_items)"],"metadata":{"id":"tIhgovQxh8KI","executionInfo":{"status":"ok","timestamp":1715193125709,"user_tz":-330,"elapsed":426,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"9170aa1b-b312-4e99-d7c5-67ec4cc6e774"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["1683\n"]}]},{"cell_type":"markdown","source":["# **Prediction Part**"],"metadata":{"id":"iFQNUKPQYOwH"}},{"cell_type":"code","source":["import numpy as np\n","\n","def predict_rating(user_id, item_id, P, Q, item_averages, user_effects):\n","    # Predict using the dot product of user and item factors from P and Q\n","    predicted_rating = np.dot(P[user_id], Q[item_id].T)\n","\n","    adjusted_prediction = predicted_rating + item_averages[item_id] + user_effects[user_id]\n","\n","\n","    return np.clip(adjusted_prediction, 1, 5)\n","\n","\n","def recommend_similar_movies(user_id, given_item_id, R, P, Q, item_averages, user_effects, top_n=10):\n","    # Predict rating for the given movie and user\n","    given_item_predicted_rating = predict_rating(user_id, given_item_id, P, Q, item_averages, user_effects)\n","\n","    # Predict ratings for all movies for the same user\n","    num_items = R.shape[1]\n","    all_predicted_ratings = np.array([\n","        predict_rating(user_id, item_id, P, Q, item_averages, user_effects)\n","        for item_id in range(num_items)\n","    ])\n","\n","    # Calculate the absolute difference from the given movie's predicted rating\n","    rating_differences = np.abs(all_predicted_ratings - given_item_predicted_rating)\n","\n","    # Mask out the given movie to avoid recommending it\n","    rating_differences[given_item_id] = np.inf\n","\n","    # Mask out already rated items to avoid recommending them\n","    rated_items_mask = R[user_id] > 0\n","    rating_differences[rated_items_mask] = np.inf\n","\n","    # Get the indices of the top N movies with the smallest difference\n","    similar_item_ids = np.argsort(rating_differences)[:top_n]\n","\n","    return similar_item_ids\n","\n"],"metadata":{"id":"Mndeo2o6NLUh","executionInfo":{"status":"ok","timestamp":1715193128769,"user_tz":-330,"elapsed":719,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["prediction = recommend_similar_movies(299,144,R, P, Q, item_averages, user_averages)\n","print(prediction)"],"metadata":{"id":"LU7nqQYocR1y","executionInfo":{"status":"ok","timestamp":1715192840555,"user_tz":-330,"elapsed":13,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"2645a92f-1efc-43f5-dc96-40458992d4ac"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["[   0 1131 1130 1129 1128 1127 1126 1125 1124 1123]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","def get_actual_rating(user_id, item_id, R):\n","    return R[user_id, item_id]\n","\n","def get_predicted_rating(user_id, item_id, P, Q, item_averages, user_effects):\n","    predicted_rating = np.dot(P[user_id], Q[item_id].T)\n","    adjusted_prediction = predicted_rating + item_averages[item_id] + user_effects[user_id]\n","    return np.clip(adjusted_prediction, 1, 5)\n","\n","def get_similar_movies_with_ratings(user_id, given_item_id, R, P, Q, item_averages, user_effects, top_n=10):\n","    # Get actual rating of the given movie\n","    actual_rating = get_actual_rating(user_id, given_item_id, R)\n","\n","    # Get private predicted rating of the given movie\n","    private_predicted_rating = get_predicted_rating(user_id, given_item_id, P, Q, item_averages, user_effects)\n","\n","    # Get predicted ratings for all movies for the same user\n","    num_items = R.shape[1]\n","    all_predicted_ratings = np.array([\n","        get_predicted_rating(user_id, item_id, P, Q, item_averages, user_effects)\n","        for item_id in range(num_items)\n","    ])\n","\n","    # Calculate absolute difference from the private predicted rating of the given movie\n","    rating_differences = np.abs(all_predicted_ratings - private_predicted_rating)\n","\n","    # Sort movies based on their similarity to the private predicted rating\n","    similar_item_ids = np.argsort(rating_differences)[:top_n]\n","\n","    # Get the actual and predicted ratings of the similar movies\n","    similar_movies_ratings = [get_actual_rating(user_id, item_id, R) for item_id in similar_item_ids]\n","    similar_movies_predicted_ratings = [all_predicted_ratings[item_id] for item_id in similar_item_ids]\n","\n","    return actual_rating, private_predicted_rating, similar_item_ids, similar_movies_ratings, similar_movies_predicted_ratings\n","\n","def get_majority_rating(ratings):\n","    # Count occurrences of each rating\n","    rating_counts = {}\n","    for rating in ratings:\n","        rating_counts[rating] = rating_counts.get(rating, 0) + 1\n","\n","    # Find the rating with the highest count\n","    majority_rating = max(rating_counts, key=rating_counts.get)\n","    return majority_rating\n","\n","\n","user_id = 299\n","given_item_id = 144\n","actual_rating, private_predicted_rating, similar_item_ids, similar_movies_ratings, similar_movies_predicted_ratings = get_similar_movies_with_ratings(user_id, given_item_id, R, P, Q, item_averages, user_averages)\n","print(\"Actual Rating of the given movie:\", actual_rating)\n","print(\"Private Predicted Rating of the given movie:\", private_predicted_rating)\n","print(\"Original Ratings of 10 similar movies:\")\n","for item_id, rating in zip(similar_item_ids, similar_movies_ratings):\n","    print(f\"Movie ID: {item_id}, Original Rating: {rating}\")\n","\n","if similar_movies_ratings:\n","    majority_actual_rating = get_majority_rating(similar_movies_ratings)\n","    print(\"Predicted Rating for the movie:\", majority_actual_rating)\n","else:\n","    print(\"No similar movies found.\")\n","\n","\n","\n","\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_VVPGdvFlr7G","executionInfo":{"status":"ok","timestamp":1715193139235,"user_tz":-330,"elapsed":437,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}},"outputId":"1542b2be-3be4-4dba-ad03-059a1520df08"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["Actual Rating of the given movie: 4.0\n","Private Predicted Rating of the given movie: 1.0\n","Original Ratings of 10 similar movies:\n","Movie ID: 0, Original Rating: 0.0\n","Movie ID: 1128, Original Rating: 0.0\n","Movie ID: 1127, Original Rating: 0.0\n","Movie ID: 1126, Original Rating: 0.0\n","Movie ID: 1125, Original Rating: 0.0\n","Movie ID: 1124, Original Rating: 0.0\n","Movie ID: 1123, Original Rating: 0.0\n","Movie ID: 1122, Original Rating: 0.0\n","Movie ID: 1121, Original Rating: 0.0\n","Movie ID: 1120, Original Rating: 0.0\n","Predicted Rating for the movie: 0.0\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","def get_actual_rating(user_id, item_id, R):\n","    return R[user_id, item_id]\n","\n","def get_predicted_rating(user_id, item_id, P, Q, item_averages, user_effects):\n","    predicted_rating = np.dot(P[user_id], Q[item_id].T)\n","    adjusted_prediction = predicted_rating + item_averages[item_id] + user_effects[user_id]\n","    return np.clip(adjusted_prediction, 1, 5)\n","\n","def get_similar_unrated_movies_ratings(user_id, given_item_id, R, P, Q, item_averages, user_effects, top_n=10):\n","    # Get actual rating of the given movie\n","    actual_rating = get_actual_rating(user_id, given_item_id, R)\n","\n","    # Get predicted rating of the given movie\n","    predicted_rating = get_predicted_rating(user_id, given_item_id, P, Q, item_averages, user_effects)\n","\n","    # Predict ratings for all unrated movies for the same user\n","    unrated_item_ids = np.where(R[user_id] == 0)[0]\n","    all_predicted_ratings = np.array([\n","        get_predicted_rating(user_id, item_id, P, Q, item_averages, user_effects)\n","        for item_id in unrated_item_ids\n","    ])\n","\n","    # Calculate absolute difference from the predicted rating of the given movie\n","    rating_differences = np.abs(all_predicted_ratings - predicted_rating)\n","\n","    # Sort unrated movies based on their similarity to the given movie's predicted rating\n","    similar_item_ids = unrated_item_ids[np.argsort(rating_differences)[:top_n]]\n","\n","    # Get the predicted ratings of the similar unrated movies\n","    similar_movies_predicted_ratings = [get_predicted_rating(user_id, item_id, P, Q, item_averages, user_effects) for item_id in similar_item_ids]\n","\n","    return actual_rating, predicted_rating, similar_item_ids, similar_movies_predicted_ratings\n","\n","user_id = 299\n","given_item_id = 144\n","actual_rating, predicted_rating, similar_item_ids, similar_movies_predicted_ratings = get_similar_unrated_movies_ratings(user_id, given_item_id, R, P, Q, item_averages, user_averages)\n","print(\"Actual Rating of the given movie:\", actual_rating)\n","print(\"Predicted Rating of the given movie:\", predicted_rating)\n","print(\"Predicted Ratings of 10 similar unrated movies:\")\n","for item_id, rating in zip(similar_item_ids, similar_movies_predicted_ratings):\n","    print(f\"Movie ID: {item_id}, Predicted Rating: {rating}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iE7fUth7jmuf","executionInfo":{"status":"ok","timestamp":1715193144237,"user_tz":-330,"elapsed":418,"user":{"displayName":"Jayant Kumar Jha","userId":"11033126048059265572"}},"outputId":"4f5ca366-f9c7-4d0a-fcb3-ad5985cef157"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["Actual Rating of the given movie: 4.0\n","Predicted Rating of the given movie: 1.0\n","Predicted Ratings of 10 similar unrated movies:\n","Movie ID: 0, Predicted Rating: 1.0\n","Movie ID: 1209, Predicted Rating: 1.0\n","Movie ID: 1208, Predicted Rating: 1.0\n","Movie ID: 1207, Predicted Rating: 1.0\n","Movie ID: 1206, Predicted Rating: 1.0\n","Movie ID: 1205, Predicted Rating: 1.0\n","Movie ID: 1204, Predicted Rating: 1.0\n","Movie ID: 1203, Predicted Rating: 1.0\n","Movie ID: 1202, Predicted Rating: 1.0\n","Movie ID: 1201, Predicted Rating: 1.0\n"]}]}]}